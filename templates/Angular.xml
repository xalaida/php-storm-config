<templateSet group="Angular">
  <template name="a-route-path-404" value="{ path: '**', pathMatch: 'full', component: $PathNotFoundComponent$ }$END$" description="Angular 404 route path" toReformat="true" toShortenFQNames="true">
    <variable name="PathNotFoundComponent" expression="" defaultValue="&quot;PathNotFoundComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-activate" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';&#10;&#10;@Injectable()&#10;export class $Name$Guard implements CanActivate {&#10; constructor() { }&#10;&#10; canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanActivate guard" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-activate-child" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';&#10;&#10;@Injectable()&#10;export class $Name$Guard implements CanActivateChild {&#10; constructor() { }&#10;&#10; canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanActivateChild guard" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-deactivate" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';&#10;import { Observable } from 'rxjs';&#10;&#10;import { $ComponentName$Component } from './$filename$.component';&#10;&#10;// Consider using this interface for all CanDeactivate guards,&#10;// and have your components implement this interface, too.&#10;//&#10;//   e.g. export class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {&#10;//&#10;// export interface CanComponentDeactivate {&#10;// canDeactivate: () =&gt; any;&#10;// }&#10;&#10;@Injectable()&#10;export class $Name$Guard implements CanDeactivate&lt;$ComponentName$Component&gt; {&#10; canDeactivate(&#10;  component: $ComponentName$Component,&#10;  currentRoute: ActivatedRouteSnapshot, &#10;  currentState: RouterStateSnapshot&#10; ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean {&#10;  return false;$END$&#10; }&#10;}" description="Angular CanDeactivate guard" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="&quot;ComponentName&quot;" alwaysStopAt="true" />
    <variable name="filename" expression="lowercaseAndDash(ComponentName)" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-load" value="import { Injectable } from '@angular/core';&#10;import { CanLoad, Route } from '@angular/router';&#10;&#10;@Injectable()&#10;export class $Name$Guard implements CanLoad {&#10; constructor() { }&#10;&#10; canLoad(route: Route) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanLoad guard" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-service-httpclient" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { catchError } from 'rxjs/operators';&#10;&#10;@Injectable()&#10;export class $ServiceName$Service {&#10; constructor(private httpClient: HttpClient) { }&#10; $END$&#10;}" description="Angular service with HttpClient" toReformat="true" toShortenFQNames="true">
    <variable name="ServiceName" expression="" defaultValue="&quot;ServiceName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-http-interceptor" value="import { Injectable } from '@angular/core';&#10;import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;&#10;@Injectable()&#10;export class HeaderInterceptor implements HttpInterceptor {&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  return next.handle(req);&#10; }&#10;}" description="Empty Angular HttpInterceptor for HttpClient" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="a-http-interceptor-headers" value="import { Injectable } from '@angular/core';&#10;import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;&#10;@Injectable()&#10;export class HeaderInterceptor implements HttpInterceptor {&#10; constructor() {}&#10;&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  const headers = req.headers&#10;   .set('Content-Type', 'application/json');&#10;  const authReq = req.clone({ headers });&#10;  return next.handle(authReq);&#10; }&#10;}" description="Angular HttpInterceptor for headers HttpClient" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="a-http-interceptor-logging" value="import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';&#10;import { Observable, tap } from 'rxjs';&#10;&#10;export class LogInterceptor implements HttpInterceptor {&#10; constructor() {}&#10;&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  const started = Date.now();&#10;  return next.handle(req).pipe(&#10;   tap(event =&gt; {&#10;    if (event instanceof HttpResponse) {&#10;     const elapsed = Date.now() - started;&#10;     console.log(`Request for \${req.urlWithParams} took \$elapsed$ ms.`);&#10;    }&#10;   })&#10;  );&#10; }&#10;}" description="Angular HttpInterceptor for Logging HttpClient" toReformat="true" toShortenFQNames="true">
    <variable name="elapsed" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-module-root" value="import { NgModule } from '@angular/core';&#10;import { BrowserModule  } from '@angular/platform-browser';&#10;import { HttpModule } from '@angular/http';&#10;&#10;import { $App$Component } from './$app$.component';&#10;import { AppRoutingModule } from './$app$.routing'; //TODO: Create $app$.routing&#10;&#10;@NgModule({&#10; imports: [&#10;  BrowserModule,&#10;  HttpModule,&#10; &#10;  AppRoutingModule,&#10; ],&#10; declarations: [$App$Component],&#10; providers: [/* TODO: Providers go here */],&#10; bootstrap: [$App$Component],&#10;})&#10;export class $App$Module { }&#10;$END$" description="Angular Root Module" toReformat="true" toShortenFQNames="true">
    <variable name="App" expression="" defaultValue="&quot;App&quot;" alwaysStopAt="true" />
    <variable name="app" expression="lowercaseAndDash(App)" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-with-children" value="{&#10; path: '', &#10; component: $Component$,&#10; children: [&#10;  { path: '$childpath$', component: $ChildComponent$ }&#10; ]&#10;}$END$" description="Angular route path with children" toReformat="true" toShortenFQNames="true">
    <variable name="Component" expression="" defaultValue="&quot;Component&quot;" alwaysStopAt="true" />
    <variable name="childpath" expression="" defaultValue="&quot;childpath&quot;" alwaysStopAt="true" />
    <variable name="ChildComponent" expression="" defaultValue="&quot;ChildComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-module-routing" value="import { NgModule } from '@angular/core';&#10;import { Routes, RouterModule } from '@angular/router';&#10;&#10;import { $Name$Component } from './$name$.component';&#10;&#10;const routes: Routes = [&#10;  { path: '$path$', component: $Name$Component },&#10;];&#10;&#10;@NgModule({&#10;  imports: [RouterModule.forChild(routes)],&#10;  exports: [RouterModule],&#10;})&#10;export class $Name$RoutingModule { }&#10;&#10;export const routedComponents = [$Name$Component];" description="Angular routing module file (forChild)" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="true" />
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
  </template>
  <template name="a-route-params-subscribe" value="this.route.params&#10; .pipe(map(params =&gt; params['id']), tap(id =&gt; (this.id = +id)))&#10; .subscribe(id =&gt; ${1:function()}());&#10;$END$" description="Angular - subscribe to routing parameters" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
</templateSet>